[{"C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\index.js":"1","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\app.js":"2","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Chat\\Chat.js":"3","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Join\\Join.js":"4","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\InfoBar\\InfoBar.js":"5","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Messages\\Messages.js":"6","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Input\\Input.js":"7","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Messages\\Message\\Message.js":"8"},{"size":150,"mtime":1609067338477,"results":"9","hashOfConfig":"10"},{"size":360,"mtime":1609157049796,"results":"11","hashOfConfig":"10"},{"size":2458,"mtime":1609222067035,"results":"12","hashOfConfig":"10"},{"size":944,"mtime":1609069889604,"results":"13","hashOfConfig":"10"},{"size":505,"mtime":1609150285718,"results":"14","hashOfConfig":"10"},{"size":381,"mtime":1609155200169,"results":"15","hashOfConfig":"10"},{"size":467,"mtime":1609153297206,"results":"16","hashOfConfig":"10"},{"size":870,"mtime":1609220357597,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1gmajw0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},"C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\index.js",[],["39","40"],"C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\app.js",[],"C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Chat\\Chat.js",["41","42"],"import React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport './Chat.css'\r\nimport InfoBar from './../InfoBar/InfoBar'\r\nimport Input from './../Input/Input'\r\nimport Messages from './../Messages/Messages'\r\nlet socket;\r\n\r\n\r\n\r\nconst Chat = ({ location }) => {\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [message,setMessage]=useState('')\r\n    const [messages,setMessages]=useState([])\r\n    const ENDPOINT = 'http://127.0.0.1:5000/';\r\n    useEffect(() => {\r\n        const { name, room } = queryString.parse(location.search)\r\n        \r\n        var connectionOptions = {\r\n            \"force new connection\": true,\r\n            \"reconnectionAttempts\": \"Infinity\",\r\n            'reconnectionDelayMax': 10000,\r\n            \"transports\": [\"websocket\"]\r\n        };\r\n\r\n        socket = io.connect(ENDPOINT);\r\n        setName(name);\r\n        setRoom(room);\r\n        socket.emit('join', { name, room },(error)=>{\r\n           if(error){\r\n\r\n               alert(error);\r\n           }\r\n        });\r\n\r\n\r\n       \r\n    },\r\n    [ENDPOINT, location.search]\r\n    )\r\n\r\n    useEffect(()=>{\r\n        socket.on('message',(message)=>{\r\n            setMessages([...messages,message]); \r\n            let mess=[]\r\n            if(messages.length==15){\r\n                window.location.reload();\r\n                mess=messages;\r\n                console.log(mess)\r\n                // setTimeout(function(){\r\n                //     console.log('hello')\r\n                //     // setMessages([...mess,message]); \r\n                // }, 5000);\r\n                    console.log('hello')\r\n           }\r\n        })\r\n    },[messages]);\r\n\r\n\r\nconst sendMessage =(event)=>{\r\n    event.preventDefault();\r\n    if(message){\r\n        socket.emit('sendMessage',message,()=>setMessage(''));\r\n    }\r\n}\r\n// console.log(messages)\r\n    return (\r\n        <div className=\"outerContainer\">\r\n            <div className='container'>\r\n                <InfoBar room={room} />\r\n                <Messages messages={messages} name={name} />\r\n                <Input message={message} sendMessage={sendMessage} setMessage={setMessage}/>\r\n                 {/* <input value={message} onChange={(event)=>setMessage(event.target.value)} \r\n                 onKeyPress ={event=>event.key === \"Enter\" ? sendMessage(event):null} /> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Chat;","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Join\\Join.js",[],"C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\InfoBar\\InfoBar.js",["43","44"],"import React from 'react'\r\nimport './Infobar.css'\r\nimport onlineIcon from '../../icons/onlineIcon.png'\r\nimport closeIcon from '../../icons/closeIcon.png'\r\nconst InfoBar =({room})=>(\r\n<div className='infoBar'>\r\n    <div className=\"leftInnerContainer\">\r\n        <img className=\"onlineIcon\" src={onlineIcon} />\r\n        <h3>{room}</h3>\r\n    </div>\r\n    <div className=\"rightInnerContainer\">\r\n        <a href='/'><img src={closeIcon} alt='close image'/></a>\r\n\r\n    </div>\r\n\r\n</div>\r\n)\r\nexport default InfoBar;","C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Messages\\Messages.js",[],"C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Input\\Input.js",[],"C:\\Users\\dhruv\\Desktop\\Chat-app\\client\\src\\components\\Messages\\Message\\Message.js",["45"],"import React from 'react'\nimport './Message.css'\nimport ReactEmoji from 'react-emoji';\n\n\n\nconst Input =({message:{user,text} ,name})=>{\n    let isSentByCUrrentUser=false;\n    const trimedName=name.trim().toLowerCase();\n    if(user===trimedName){\n      isSentByCUrrentUser=true;\n    }\n    return(\n      isSentByCUrrentUser\n       ?(\n        <div className=\"messageContainer justifyEnd\">\n          <p className=\"sentText pr-10\">{trimedName}</p>\n          <div className=\"messageBox backgroundBlue\">\n            <p className=\"messageText colorWhite\">{text}</p>\n          </div>\n        </div>\n       )\n       :(<div className=\"messageContainer justifyStart\">\n       <div className=\"messageBox backgroundLight\">\n         <p className=\"messageText colorDark\">{text}</p>\n       </div>\n       <p className=\"sentText pl-10 \">{user}</p>\n     </div>)\n    )\n}\nexport default Input;",["46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":21,"column":13,"nodeType":"54","messageId":"55","endLine":21,"endColumn":30},{"ruleId":"56","severity":1,"message":"57","line":48,"column":31,"nodeType":"58","messageId":"59","endLine":48,"endColumn":33},{"ruleId":"60","severity":1,"message":"61","line":8,"column":9,"nodeType":"62","endLine":8,"endColumn":56},{"ruleId":"63","severity":1,"message":"64","line":12,"column":21,"nodeType":"62","endLine":12,"endColumn":61},{"ruleId":"52","severity":1,"message":"65","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":18},{"ruleId":"48","replacedBy":"66"},{"ruleId":"50","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'connectionOptions' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'ReactEmoji' is defined but never used.",["68"],["69"],"no-global-assign","no-unsafe-negation"]